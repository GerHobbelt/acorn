#!/usr/bin/env node

var path = require("path");
var fs = require("fs");
var acorn = require("../acorn.js");

var infile, parsed, code = "", options = {};
var silent = false, compact = false, useStdin = false;

function help(status) {
  var name = path.basename(process.argv[1]);
  // We want to print to stderr, not stdout, on errors.
  var print = (status === 0) ? console.log : console.error;

  print("usage: " + name + " [options] [--] file\n");
  print("Parses <file> and outputs the parsed AST as a stringified JSON object.");
  print("If <file> is '-', reads from stdin.\n");
  print("Options:");
  print("--ecma3|--ecma5      Sets the ECMAScript version to parse. Default is version 5.");
  print("--strict-semicolons  Prevents the parser from doing automatic semicolon insertion.");
  print("                     Statements that do not end in semicolons will generate an error.");
  print("--track-comments     Attaches an array of comments found before and after each expression node.");
  print("--track-spaces       Attaches an array of whitespaces found before and after each expression node.");
  print("--locations          Attaches a \"loc\" object to each node with \"start\" and \"end\" subobjects,");
  print("                     each of which contains the one-based line and zero-based column numbers.");
  print("-Dmacro|--macro macro[([param, ...])][=definition]]");
  print("                     Defines a macro. A name with no parameters and no definition will be defined");
  print("                     with the value 1. To be safe from shell expansion, the values on either side");
  print("                     of the = should be enclosed in '', for example -D'PLUS_ONE(arg)'='arg + 1'.");
  print("                     May be used multiple times to define multiple macros.");
  print("--no-objj            Turns off Objective-J syntax parsing.");
  print("--no-preprocess      Turns off the preprocessor. Results in ~30% speed increase.");
  print("--compact            No whitespace is used in the AST output.");
  print("--silent             Do not output the AST, just return the exit status.");
  print("--version            Print the current version and exit.");
  print("-h|--help            Print this usage information and exit.");

  process.exit(status);
}

for (var i = 2; i < process.argv.length; ++i) {
  var arg = process.argv[i];
  if (arg[0] !== "-" && !infile) infile = arg;
  else if (arg === "--" && !infile && i + 2 === process.argv.length) infile = process.argv[++i];
  else if (arg === "--ecma3") options.ecmaVersion = 3;
  else if (arg === "--ecma5") options.ecmaVersion = 5;
  else if (arg === "--strict-semicolons") options.strictSemicolons = true;
  else if (arg === "--track-comments") options.trackComments = true;
  else if (arg === "--track-spaces") options.trackSpaces = true;
  else if (arg === "--locations") options.locations = true;
  else if (arg.slice(0, 2) === "-D") (options.macros || (options.macros = [])).push(arg.slice(2));
  else if (arg === "--macro") (options.macros || (options.macros = [])).push(process.argv[++i]);
  else if (arg === "--no-preprocess") options.preprocess = false;
  else if (arg === "--no-objj") options.objj = false;
  else if (arg === "--compact") compact = true;
  else if (arg === "--silent") silent = true;
  else if (arg === "--version") {
    console.log(acorn.version);
    process.exit(0);
  }
  else if (arg === "-h" || arg === "--help") help(0);
  else if (arg === "-") {
    useStdin = true;
    break;
  } else help(1);
}

if (!useStdin && !infile) help(1);

if (useStdin) {
  process.stdin.resume();
  process.stdin.setEncoding('utf8');

  process.stdin.on('data', function(chunk) {
    code += chunk;
  });

  process.stdin.on('end', function() {
    main();
  });
}
else {
  options.sourceFile = path.resolve(infile);
  code = fs.readFileSync(options.sourceFile, "utf8");
  main();
}

function main() {
  try {
    parsed = acorn.parse(code, options);
  } catch(e) {
    console.log(e.message);
    process.exit(1);
  }

  if (!silent)
    console.log(JSON.stringify(parsed, null, compact ? null : 2));
}
